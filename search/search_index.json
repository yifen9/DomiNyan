{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DomiNyan","text":"<p>Explore game visualizations using the Viewer tab.</p>"},{"location":"reports/","title":"Overview","text":""},{"location":"reports/#project-summary","title":"Project Summary","text":"<p>DomiNyan is an open, modular research project that builds an AI\u2011training platform for the partially\u2011observable strategic deck\u2011building game Dominion.</p> <p>The project couples a deterministic simulation engine, a structured logging system, and an extensible self\u2011play framework for studying decision\u2011making in stochastic, multi\u2011agent environments. Its long\u2011term vision is to become an open platform for experimentation and benchmarking in reinforcement learning (RL), agent modelling, and AI interpretability, with a deliberate focus on reproducibility, accessibility, and scalability across single\u2011 and multi\u2011agent settings.</p> <p>The simulator is written entirely in Julia, chosen for high performance and a composable design ethos. Fine\u2011grained hooks expose state tracking, logging, and modular logic injection (card behaviours, agent strategies, rule variants). Python is intentionally avoided to minimise overhead and keep a single fast runtime.</p> <p>Architecturally, the code base is evolving toward a domain\u2011specific language (DSL) that cleanly expresses card effects and strategy reasoning. While the prototype lives in Julia macros, future iterations may isolate behaviour definitions in functional DSLs\u2014e.g. Elixir, OCaml, or Gleam\u2014or run them on high\u2011performance Rust executors, improving composability, testability, and long\u2011term maintainability.</p> <p>DomiNyan aims to:</p> <ul> <li>Deliver a faithful and reproducible Dominion engine with structured phase execution and deterministic game flow for rigorous benchmarking.</li> <li>Enable modular self\u2011play training via explicit strategy layers (<code>Choose.*</code>) and overridable decision points.</li> <li>Generate structured logs and temporal snapshots for replay, supervision, and downstream model training.</li> <li>Provide open\u2011science tooling, including GitHub\u00a0Pages replays and standardised JSON/CSV exports for archival and sharing.</li> <li>Establish a scalable foundation for team\u2011based agents, meta\u2011strategy evolution, cross\u2011version generalisation, and curriculum\u2011based training\u2014supporting both academic and applied research.</li> </ul> <p>By modularising every layer\u2014from core mechanics to export pipelines\u2014DomiNyan offers a clean, extensible base for long\u2011term research, classroom exploration, and competitive AI benchmarking.</p>"},{"location":"reports/#project-structure","title":"Project Structure","text":"<p>The DomiNyan project is organized into modular components, structured around clear responsibilities. Below is the current directory tree with inline explanations.</p>"},{"location":"reports/#overall-repository-layout","title":"Overall repository layout","text":"<pre><code>DomiNyan/\n\u251c\u2500\u2500 src/core/               # Game simulator (see detailed tree below)\n\u251c\u2500\u2500 docs/                   # MkDocs site, reports, static assets\n\u2502   \u251c\u2500\u2500 index.md            # Landing page\n\u2502   \u251c\u2500\u2500 reports.md          # Project summary &amp; progress logs\n\u2502   \u251c\u2500\u2500 viewer.md           # Replay viewer\n\u2502   \u2514\u2500\u2500 data/games/         # Auto\u2011exported logs &amp; tracker snapshots\n\u251c\u2500\u2500 scripts/                # One\u2011off and automation utilities\n\u2502   \u251c\u2500\u2500 export_tracker_to_docs.jl\n\u2502   \u2514\u2500\u2500 format.jl           # (planned) JuliaFormatter entry point\n\u251c\u2500\u2500 test/                   # Unit &amp; integration tests\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/          # ci.yml, docs.yml, format.yml\n\u251c\u2500\u2500 Project.toml            # Julia package environment\n\u251c\u2500\u2500 Manifest.toml           # Locked dependency versions\n\u251c\u2500\u2500 README.md               # (planned) Quick\u2011start &amp; architecture overview\n\u251c\u2500\u2500 CONTRIBUTING.md         # (planned) Coding style &amp; PR checklist\n\u2514\u2500\u2500 LICENSE                 # (planned) MIT\n</code></pre>"},{"location":"reports/#game-simulator","title":"Game simulator:","text":"<pre><code>src/core/                   # Core simulation engine\n\u251c\u2500\u2500 play/                   # Public gameplay API (draw, buy, resolve, \u2026)\n\u2502   \u251c\u2500\u2500 play.jl             # External entry point\n\u2502   \u251c\u2500\u2500 types/              # Concrete type definitions &amp; small traits\n\u2502   \u251c\u2500\u2500 player/             # Player data structures &amp; helpers\n\u2502   \u251c\u2500\u2500 dispatcher/         # Dispatches external calls to effect pipeline\n\u2502   \u2514\u2500\u2500 effects/            # Pure effect functions (gain_card!, trash_card!, \u2026)\n\u251c\u2500\u2500 cards/                  # Card catalogue\n\u2502   \u251c\u2500\u2500 cards.jl            # Top\u2011level import + shared helpers\n\u2502   \u251c\u2500\u2500 registry/           # Registers card metadata into global table\n\u2502   \u251c\u2500\u2500 loader/             # Batch loader (by set, by filename, CLI)\n\u2502   \u2514\u2500\u2500 set/                # Concrete card sets (Base, Intrigue, \u2026)\n\u2514\u2500\u2500 game/                   # Session management\n    \u251c\u2500\u2500 game.jl             # Session\u2011level entry (run, save, resume)\n    \u251c\u2500\u2500 state/              # Immutable/serialisable game state snapshots\n    \u251c\u2500\u2500 tracker/            # Time\u2011series state recorder\n    \u251c\u2500\u2500 logger/             # Structured CSV / JSON logging\n    \u251c\u2500\u2500 choose/             # Human &amp; AI decision hooks (`Choose.*`)\n    \u2514\u2500\u2500 loop/               # Turn driver\n        \u251c\u2500\u2500 loop.jl         # Orchestrates turn lifecycle\n        \u2514\u2500\u2500 phases/         # start.jl, action.jl, buy.jl, cleanup.jl\n</code></pre>"},{"location":"reports/#development-timeline","title":"Development timeline","text":""},{"location":"reports/#milestone-reports","title":"Milestone reports","text":"Phase Target window Status Report Highlights Primary tech focus P1 / Active / <code>core.jl</code>, <code>loop.jl</code>, <code>log.csv</code>, <code>state.json</code> Julia + macros P1.1 2025-04-12 Done / Basic loop, minimal logger / P1.2 2025-04-13 Done / Tracker, first viewer stub / P1.3 / Active / Remaining effects, full base\u2011set cards / P1.4 / Pending / Complete simulator; expose <code>Choose.*</code> hooks / P2 / Planned / AST schema, runtime evaluator AST design, DSL construction P3 / Planned / Headless runner, stats module, charting Julia multithreading or Elixir concurrency; Rust optional for high\u2011speed parser P4 / Planned / PPO / genetic / self\u2011play baseline Flux.jl + RL.jl P5 / Research / <code>.domi</code> spec, AST \u2192 JSON converter; training OCaml for type\u2011safe parser; Rust or Gleam alt. P6 / Research / Elixir/Gleam service, supervisor tree, SQL BEAM (Elixir or Gleam) + SQL P7 / Research / Online DSL editor, strategy diff UI, public demos /"},{"location":"reports/#daily-reports","title":"Daily reports","text":"Date Contributor Summary 2025-04-11 \u2192 2025-04-13 Li Yifeng P1.1 &amp; P1.2 finished 2025-04-19 Li Yifeng Reporting pipeline bootstrapped, refactoring <code>core/play/</code> and <code>core/cards/</code> 2025-04-20 Li Yifeng Core refactor, effects pipeline added, 95.7% coverage. 2025-04-21 Li Yifeng Finalized the effects pipeline and choose flow integration, 95.8% test pass rate"},{"location":"reports/#technical-roadmap","title":"Technical roadmap","text":""},{"location":"reports/#p1-simulator-logging","title":"P1 - Simulator &amp; logging","text":"<ul> <li>Lock down deterministic game loop; complete all base\u2011set cards.</li> <li>Write property\u2011based tests until 90 % coverage.</li> <li>Master Julia macros for concise card definitions.</li> </ul>"},{"location":"reports/#p2-dsl-layer","title":"P2 - DSL layer","text":"<ul> <li>Draft EBNF grammar for card effects and strategy rules.</li> <li>Emit typed AST objects; build small interpreter in Julia.</li> <li>Explore Rust pest or OCaml Menhir as alternate parsers.</li> </ul>"},{"location":"reports/#p3-batch-simulation-analytics","title":"P3 - Batch simulation &amp; analytics","text":"<ul> <li>Introduce Julia multithreading; benchmark vs. Erlang/Elixir concurrency.</li> <li>Aggregate logs; surface charts in MkDocs via Vega\u2011Lite.</li> </ul>"},{"location":"reports/#p4-ai-baseline","title":"P4 - AI baseline","text":"<ul> <li>Integrate Flux.jl and RL.jl; implement PPO and genetic agents.</li> <li>Add self\u2011play tournament driver; export Elo curves.</li> </ul>"},{"location":"reports/#p5-dsl-externalisation","title":"P5 \u2013 DSL externalisation","text":"<ul> <li>Freeze <code>.domi</code> file format (JSON schema).</li> <li>Provide CLI validator in OCaml for static guarantees (or Rust for speed).</li> <li>Investigate Gleam as strongly\u2011typed BEAM DSL host.</li> </ul>"},{"location":"reports/#p6-inference-service-platform","title":"P6 \u2013 Inference service platform","text":"<ul> <li>Stand up Elixir (or Gleam) micro\u2011service to serve strategy decisions.</li> <li>Use OTP supervisor tree and a SQL store (PostgreSQL).</li> <li>Optional: port hot path to Rust and expose over NIF or WASM.</li> </ul>"},{"location":"reports/#p7-public-authoring-visualisation","title":"P7 \u2013 Public authoring &amp; visualisation","text":"<ul> <li>Web DSL editor, strategy diff UI, public demos</li> </ul>"},{"location":"reports/#current-progress","title":"Current progress","text":"<p>as of 2025\u201104\u201119</p> <ul> <li>12/39 base\u2011set card files implemented; remaining action cards queued.</li> <li>Core tracker stable; CSV + JSON logs auto\u2011export to <code>docs/data/games/</code>.</li> <li>Viewer page loads snapshots; timeline scrubber half done.</li> <li>Unit\u2011test suite: 3 unit tests, 100% passing; CI and docs workflows scaffolded.</li> </ul> <p>Next steps</p> <ol> <li>Resolve effects that depend on the choose module    \u2013 wire <code>effects/</code> and the main game loop to <code>choose/</code> without circular calls.  </li> <li>Implement all remaining card effects and missing cards.  </li> <li>Improve the visual\u2011analytics tool and tighten benchmark tests.</li> </ol>"},{"location":"reports/#contributors","title":"Contributors","text":"<p>Contribution graph is available here.</p> Name Role Status First commit Li Yifeng Project Initiator, Core developer Active 2025-04-11 Luca Fiorini Core developer Active / <p></p>"},{"location":"viewer/","title":"DomiNyan Viewer","text":""},{"location":"viewer/#select-a-game-session","title":"Select a Game Session","text":""},{"location":"viewer/#select-a-tracker-snapshot","title":"Select a Tracker Snapshot","text":"Turn Filter Player Filter Phase Filter <ul> <li>\ud83d\udcc4 Snapshot JSON</li> <li>\ud83e\uddd1 Players</li> <li>\ud83d\udcca Resource Chart</li> <li>\ud83d\udce6 Supply &amp; Trash</li> </ul> <p>(Chart Placeholder...)</p> <p>(Supply Placeholder...)</p>"},{"location":"reports/2025-04-19/","title":"2025\u201104\u201119 Report","text":""},{"location":"reports/2025-04-19/#overview","title":"Overview","text":"<p>Today we completed a major refactoring of the core engine modules (<code>play/</code> and <code>cards/</code>), introduced a robust macro\u2011driven effects registry, and achieved full test coverage across both subsystems.</p>"},{"location":"reports/2025-04-19/#key-accomplishments","title":"Key Accomplishments","text":"<ol> <li> <p>Types Templating </p> </li> <li> <p>Defined <code>CardTemplate(name, cost, type, data)</code> as the single canonical representation for all cards.  </p> </li> <li>Added convenience constructors:  <ul> <li><code>Treasure(name; cost, coin_gain)</code> </li> <li><code>Victory(name; cost, vp)</code> </li> <li><code>Action(name; cost; kwargs...)</code> </li> </ul> </li> <li> <p>Exposed <code>card_info</code> to merge or isolate raw <code>data</code> fields into a <code>NamedTuple</code>.</p> </li> <li> <p>Player Module (<code>play/</code>) </p> </li> <li> <p>Redesigned <code>State</code> struct: added <code>played</code> pile, reordered fields to \u201cnoun first,\u201d and adhered to \u201cmodule\u2011prefix\u201d naming.  </p> </li> <li><code>new(deck_starting; deck_shuffle=true)</code> supports optional shuffle.  </li> <li> <p>Provided simple getters: <code>deck_size</code>, <code>hand_size</code>, <code>played_size</code>, <code>discard_size</code>.</p> </li> <li> <p>Effects Framework </p> </li> <li> <p>Macro registration: <code>@register :sym fn</code> registers an effect at compile time, warning on overwrite.  </p> </li> <li>Dispatcher: <code>dispatch(card, player, game; args=nothing)</code> <ul> <li>Reads <code>card.data[:effects]</code> symbols  </li> <li>Looks up each effect via <code>Registry.get</code> (now using <code>Base.get</code> to avoid recursion)  </li> <li>Supplies either the keyed value from <code>card.data</code> or the fallback <code>args</code>.  </li> </ul> </li> <li> <p>Improved parameter passing by using keyword args and per\u2011effect defaults.</p> </li> <li> <p>Cards Module (<code>cards/</code>) </p> </li> <li> <p>Simplified <code>Registry</code>: <code>Dict{Symbol,CardTemplate}</code> with <code>set!</code>/<code>get</code>/<code>exists</code>/<code>list_cards</code>.  </p> </li> <li>Centralized macro <code>@register :Name expr</code> in <code>cards.jl</code>\u2014no per\u2011file <code>using</code> needed.  </li> <li> <p>Enhanced <code>SetsLoader.sets_load!(; sets, cards)</code> to support both set\u2011level and card\u2011level filtering, matching filenames in lowercase to symbol inputs.</p> </li> <li> <p>Testing &amp; Coverage </p> </li> <li>Play tests (<code>test_play.jl</code>): covers <code>Types</code>, <code>Player</code>, <code>Effects</code>, and macro registry without any dependency on <code>Cards</code>.  </li> <li>Cards tests (<code>test_cards.jl</code>): covers <code>Registry</code> API, <code>@register</code> macro, and <code>SetsLoader</code> behavior.  </li> <li>Result: 6 modules, 19 tests, 100% passing.</li> </ol>"},{"location":"reports/2025-04-19/#next-steps","title":"Next Steps","text":"<ul> <li>Refactor <code>game/</code> module </li> <li>Design global game state (supply piles, trash, turn phases).  </li> <li> <p>Implement turn flow: Action \u2192 Buy \u2192 Cleanup.</p> </li> <li> <p>Enhance Effects DSL </p> </li> <li>Support conditional and composite effects.  </li> <li> <p>Consider a mini\u2011DSL or additional macros for complex card logic.</p> </li> <li> <p>Documentation &amp; Reporting </p> </li> <li>Update <code>reports.md</code> with <code>game/</code> design diagrams.  </li> <li> <p>Add usage examples and a quick\u2011start guide.</p> </li> <li> <p>CI &amp; Quality Metrics </p> </li> <li>Configure GitHub Actions to run tests and publish coverage.  </li> <li>Automate daily report generation and badge updates.</li> </ul> <p>Conclusion </p> <p>The foundation for card definitions, player state, and effect dispatching is now rock solid and fully tested. Tomorrow we\u2019ll extend this core into a full game loop and start wiring up actual gameplay.</p>"},{"location":"reports/2025-04-20/","title":"2025\u201104\u201120 Report","text":""},{"location":"reports/2025-04-20/#overview","title":"Overview","text":"<p>Today we reorganized the codebase by moving and rewriting core game and tool modules, introduced a composite effects pipeline, revamped the play\u2011choose logic, and pushed our test coverage to 95.7%.</p>"},{"location":"reports/2025-04-20/#key-accomplishments","title":"Key Accomplishments","text":"<ol> <li> <p>Project Structure &amp; Module Reorganization</p> </li> <li> <p>Moved <code>game/choose</code> into <code>play/choose</code> to align naming with gameplay flow.  </p> </li> <li> <p>Relocated <code>game/tracker</code> and <code>game/logger</code> into <code>core/tools</code> for clearer separation of cross\u2011cutting utilities.</p> </li> <li> <p>Core State &amp; Logging Rewrite</p> </li> <li> <p>Completely rewrote <code>game/state</code>, <code>game/tracker</code>, and <code>game/logger</code>:  </p> <ul> <li>Standardized state fields and ordering.  </li> <li>Streamlined tracker events and logger output formats.  </li> </ul> </li> <li> <p>Ensured all tool modules follow the \u201cmodule\u2011prefix\u201d naming convention and export only their public API.</p> </li> <li> <p>Play\u2011Choose Logic Overhaul</p> </li> <li> <p>Rewrote <code>play/choose</code> to simplify choice resolution and strategy loading.  </p> </li> <li> <p>Introduced dynamic strategy discovery in the loader, decoupling strategy files from hard\u2011coded registration.</p> </li> <li> <p>Effects Pipeline</p> </li> <li> <p>Added <code>effects/pipeline</code> as a composite effects runner:  </p> <ul> <li>Chains multiple effect functions in sequence.  </li> <li>Supports early termination and branching based on effect results.  </li> </ul> </li> <li> <p>Updated individual effects to emit standardized output for pipeline consumption.</p> </li> <li> <p>Testing &amp; Coverage</p> </li> <li> <p>Expanded unit tests: now 22/23 tests passing across 8 units (95.65% coverage).  </p> </li> <li>Added new tests for the composite pipeline and the reordered modules.</li> </ol>"},{"location":"reports/2025-04-20/#next-steps","title":"Next Steps","text":"<ul> <li>Complete Pipeline Logic   Finalize branching, rollback, and conditional execution within <code>effects/pipeline</code>.  </li> <li>Enhance Core Effects   Refactor <code>effects/core</code> for DRYness and better default parameters.  </li> <li>Grow Strategy Suite   Implement additional choose\u2011strategies to cover edge cases.  </li> <li>Finish Base Set Cards   Add remaining card definitions and associated effects for the base set.  </li> <li>Refactor Tools   Rewrite <code>tools/tracker</code> and <code>tools/logger</code> to use the new pipeline abstractions.  </li> <li>Implement Game Loop   Begin a full <code>game/loop</code> module: turn phases, supply management, and trash handling.</li> </ul>"},{"location":"reports/2025-04-20/#conclusion","title":"Conclusion","text":"<p>Significant progress today on restructuring and the new effects pipeline. Tomorrow we\u2019ll finalize the pipeline logic and start wiring up the full game loop.</p>"},{"location":"reports/2025-04-21/","title":"2025\u201104\u201121 Report","text":""},{"location":"reports/2025-04-21/#overview","title":"Overview","text":"<p>Today we finalized the effects pipeline integration, streamlined card dispatch through atomic and composite flows, revamped the choose flow, and maintained a 95.8% test pass rate (8 units, 23/24 tests passing).</p>"},{"location":"reports/2025-04-21/#key-accomplishments","title":"Key Accomplishments","text":"<ol> <li>Effects Pipeline Completion </li> <li> <p>Nearly completed integration of the composite <code>effects/pipeline</code> module for sequencing and branching atomic effects.</p> </li> <li> <p>Card Dispatch &amp; Choose Flow </p> </li> <li> <p>Enhanced the path from card dispatch to atomic effects, through the pipeline, into a unified choose flow.</p> </li> <li> <p>Testing &amp; Coverage </p> </li> <li>Ran 8 unit suites with 23/24 tests passing, ensuring stability as pipeline features landed.</li> </ol>"},{"location":"reports/2025-04-21/#next-steps","title":"Next Steps","text":"<ul> <li>Polish remaining pipeline edge\u2011cases and conditional branches.  </li> <li>Expand choose strategies to cover more scenarios.  </li> <li>Begin wiring the full game loop into the pipeline.</li> </ul>"},{"location":"reports/2025-04-21/#conclusion","title":"Conclusion","text":"<p>Significant strides today on pipeline and card processing. Tomorrow we\u2019ll finalize pipeline polish and integrate the game loop.  </p>"}]}